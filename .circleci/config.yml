version: 2.1
commands:
    installawscli:
      description: install awscli
      steps:
        - run :
            name: install awscli v2 
            command: |
               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
               unzip awscliv2.zip
               sudo ./aws/install

    installansible:
      description: install ansible
      steps:
        - run :
            name: install ansible
            command: |
                sudo apt update 
                sudo apt install software-properties-common -y
                sudo add-apt-repository --yes --update ppa:ansible/ansible 
                sudo apt install ansible -y
    installnodejs:
      description: install nodejs 13.8.0
      steps:
        - run :
            name: install nodejs
            command: |
               curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
               sudo apt install -y nodejs
    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        Workflow_ID:  
          type: string 
          default: ${CIRCLE_WORKFLOW_ID:0:7}    
      steps:
      - run:
          name: Revert migrations
          when: on_fail 
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/$(KVDB_BUCKET)/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:  
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.Workflow_ID>>" 
              aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.Workflow_ID>>"
jobs:
  build-frontend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - installnodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend                    
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end Unit test
          command: |
             cd frontend
             npm install
             npm test
                
  test-backend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Unit test
          command: |
             cd backend
             npm install
             npm test

  scan-frontend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
             cd frontend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
  configure-infrastructure:
    docker: 
      - image: cimg/node:14.20
    steps:
      - checkout
      - installansible
      - add_ssh_keys:
          fingerprints:
            - "95:c9:9d:e6:94:0f:d4:b3:44:a3:ef:b0:c3:3c:df:bc"
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 

  run-migrations:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - installawscli
      - installnodejs
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
              curl https://kvdb.io/$(KVDB_BUCKET)/migrations_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-infrastructure:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - installawscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP="3.82.113.199"
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  deploy-frontend:
    docker:
      - image: cimg/node:14.20
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - installawscli
      - installnodejs
      - run:
          name: install dependancies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP="3.82.113.199"
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
             cd frontend
             npm run build
             aws s3 cp dist s3://udapeople-q2w3ee3 --recursive

  #deploy-backend:
  #  docker:
  #    - image: cimg/node:14.20
  #  steps:
  #    - checkout
  #    - installawscli
  #    - installnodejs
  #    - installansible
  #    - restore_cache:
  #        keys: [backend-build]
  #    - add_ssh_keys:
  #        fingerprints:
  #          - "95:c9:9d:e6:94:0f:d4:b3:44:a3:ef:b0:c3:3c:df:bc"
  #    - attach_workspace:
  #        at: ~/
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          cd backend
  #          npm install
  #    - run:
  #        name: backend packages
  #        command: |
  #           cd backend
  #           npm run build
  #           tar -czf artifact.tar.gz dist/* package*
#
  #           cd .. 
  #           cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
#
  #    - run:
  #        name: Deploy backend
  #        command: |
  #           export TYPEORM_MIGRATIONS_DIR=./migrations
  #           export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
  #           export TYPEORM_MIGRATIONS=./migrations/*.ts
#
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]

          
          